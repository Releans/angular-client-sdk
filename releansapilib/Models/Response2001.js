/**
 * ReleansAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Response2001
 *
 * @constructor
 */
angular.module('ReleansAPILib')
    .factory('Response2001', ['BaseModel', Response2001Model]);

    function Response2001Model(BaseModel) {
        var Response2001 = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.id = this.getValue(obj.id);
            this.senderName = this.getValue(obj.senderName);
            this.phoneNumber = this.getValue(obj.phoneNumber);
            this.status = this.getValue(obj.status);
        };

        Response2001.prototype = new BaseModel();
        Response2001.prototype.constructor = Response2001;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Response2001.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'id', realName: 'id' },
                { name: 'senderName', realName: 'senderName' },
                { name: 'phoneNumber', realName: 'phoneNumber' },
                { name: 'status', realName: 'status' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Response2001.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        Response2001.prototype.getId = function () {
            return this.id;
        };
    
        /**
         * Setter for Id
         * 
         * @param {string} value 
         */
        Response2001.prototype.setId = function (value) {
            this.id = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        Response2001.prototype.getSenderName = function () {
            return this.senderName;
        };
    
        /**
         * Setter for SenderName
         * 
         * @param {string} value 
         */
        Response2001.prototype.setSenderName = function (value) {
            this.senderName = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {string}
         */
        Response2001.prototype.getPhoneNumber = function () {
            return this.phoneNumber;
        };
    
        /**
         * Setter for PhoneNumber
         * 
         * @param {string} value 
         */
        Response2001.prototype.setPhoneNumber = function (value) {
            this.phoneNumber = value;
        };
    
        /**
         * TODO: Write general description for this method
         *
         * @return {int}
         */
        Response2001.prototype.getStatus = function () {
            return this.status;
        };
    
        /**
         * Setter for Status
         * 
         * @param {int} value 
         */
        Response2001.prototype.setStatus = function (value) {
            this.status = value;
        };
    
        return Response2001;
    }

}(angular));
